// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  name        String
  email       String  @unique
  password    String
  avatar      String? @map("avatar")
  phoneNumber String  @map("phone_number")
  roleId      Int     @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  role              Role                @relation(fields: [roleId], references: [id])
  employeeBranch    EmployeeBranch[]
  UserAddress       UserAddress[]
  ShipmentDetail    ShipmentDetail[]
  ShipmentHistory   ShipmentHistory[]
  ShipmentBranchLog ShipmentBranchLog[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  key       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user            User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  key       String   @unique
  resource  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Branch {
  id                Int                 @id @default(autoincrement())
  name              String
  address           String
  phoneNumber       String              @map("phone_number")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  employeeBranch    EmployeeBranch[]
  ShipmentHistory   ShipmentHistory[]
  ShipmentBranchLog ShipmentBranchLog[]

  @@map("branches")
}

model EmployeeBranch {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  branchId  Int      @map("branch_id")
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])

  @@map("employee_branches")
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  address   String
  tag       String?
  label     String?
  photo     String?
  latitude  Float?
  longitude Float?
  createAt  DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user           User             @relation(fields: [userId], references: [id])
  shipmentDetail ShipmentDetail[]

  @@map("user_addresses")
}

model Shipment {
  id                Int                 @id @default(autoincrement())
  paymentStatus     String              @map("payment_status")
  deliveryStatus    String?             @map("delivery_status")
  trackingNumber    String?             @map("tracking_number")
  qrCodeImage       String?             @map("qr_code_image") // now stores QR code images
  price             Float?
  distance          Float?
  createAt          DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  shipmentDetail    ShipmentDetail?
  shipmentHistory   ShipmentHistory[]
  payment           Payment?
  shipmentBranchLog ShipmentBranchLog[]

  @@map("shipments")
}

model ShipmentDetail {
  id                   Int     @id @default(autoincrement())
  shipmentId           Int     @unique @map("shipment_id")
  userId               Int     @map("user_id")
  pickupAddressId      Int     @map("pickup_address_id")
  weight               Float?
  deliveryType         String  @map("delivery_type")
  destinationAddress   String  @map("destination_address")
  destinationLatitude  Float?  @map("destination_latitude")
  destinationLongitude Float?  @map("destination_longitude")
  packageType          String  @map("package_type")
  pickupProof          String? @map("pickup_proof")
  receiptProof         String? @map("receipt_proof")
  recipientName        String  @map("recipient_name")
  recipientPhone       String  @map("recipient_phone")

  // Price components
  basePrice     Float?   @map("base_price")
  weightPrice   Float?   @map("weight_price")
  distancePrice Float?   @map("distance_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  shipment Shipment    @relation(fields: [shipmentId], references: [id])
  user     User        @relation(fields: [userId], references: [id])
  address  UserAddress @relation(fields: [pickupAddressId], references: [id])

  @@map("shipment_details")
}

model ShipmentHistory {
  id          Int      @id @default(autoincrement())
  shipmentId  Int      @map("shipment_id")
  userId      Int?     @map("user_id")
  branchId    Int?     @map("branch_id")
  status      String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  shipment Shipment @relation(fields: [shipmentId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])
  branch   Branch?  @relation(fields: [branchId], references: [id])

  @@map("shipment_histories")
}

model Payment {
  id            Int       @id @default(autoincrement())
  shipmentId    Int       @unique @map("shipment_id")
  externalId    String?   @map("external_id")
  invoiceId     String?   @map("invoice_id")
  paymentMethod String?   @map("payment_method")
  status        String?
  invoiceUrl    String?   @map("invoice_url")
  expiryDate    DateTime? @map("expiry_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  shipment Shipment @relation(fields: [shipmentId], references: [id])

  @@map("payments")
}

model ShipmentBranchLog {
  id              Int      @id @default(autoincrement())
  shipmentId      Int      @map("shipment_id")
  branchId        Int      @map("branch_id")
  trackingNumber  String   @map("tracking_number")
  type            String // 'IN' or 'OUT'
  status          String // Current shipment status
  description     String?
  scannedByUserId Int      @map("scanned_by_user_id")
  scanTime        DateTime @default(now()) @map("scan_time")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  shipment      Shipment @relation(fields: [shipmentId], references: [id])
  branch        Branch   @relation(fields: [branchId], references: [id])
  scannedByUser User     @relation(fields: [scannedByUserId], references: [id])

  @@map("shipment_branch_logs")
}
